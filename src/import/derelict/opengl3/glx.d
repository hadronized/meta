/*

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.

*/
module derelict.opengl3.glx;

private import derelict.util.system;

static if(Derelict_OS_Posix && !Derelict_OS_Mac)
{
    private
    {
        import std.string;

        import derelict.util.loader;
        import derelict.util.xtypes;
        import derelict.opengl3.types;
    }

    struct __GLXcontextRec;
    struct __GLXFBConfigRec;

    alias uint GLXContentID;
    alias uint GLXPixmap;
    alias uint GLXDrawable;
    alias uint GLXPbuffer;
    alias uint GLXWindow;
    alias uint GLXFBConfigID;

    alias __GLXcontextRec *GLXContext;
    alias __GLXFBConfigRec *GLXFBConfig;

    struct GLXPbufferClobberEvent
    {
        int         event_type;
        int         draw_type;
        uint        serial;
        Bool        send_event;
        Display*    display;
        GLXDrawable drawable;
        uint        buffer_mask;
        uint        aux_buffer;
        int         x, y;
        int         width, height;
        int         count;
    }

    union GLXEvent
    {
        GLXPbufferClobberEvent glxpbufferclobber;
        int pad[24];
    }

    extern (C)
    {
        alias nothrow XVisualInfo* function(Display*,int,int*) da_glXChooseVisual;
        alias nothrow void function(Display*,GLXContext,GLXContext,uint) da_glXCopyContext;
        alias nothrow GLXContext function(Display*,XVisualInfo*,GLXContext,Bool) da_glXCreateContext;
        alias nothrow GLXPixmap function(Display*,XVisualInfo*,Pixmap) da_glXCreateGLXPixmap;
        alias nothrow void function(Display*,GLXContext) da_glXDestroyContext;
        alias nothrow void function(Display*,GLXPixmap) da_glXDestroyGLXPixmap;
        alias nothrow int  function(Display*,XVisualInfo*,int,int*) da_glXGetConfig;
        alias nothrow GLXContext function() da_glXGetCurrentContext;
        alias nothrow GLXDrawable function() da_glXGetCurrentDrawable;
        alias nothrow Bool function(Display*,GLXContext) da_glXIsDirect;
        alias nothrow Bool function(Display*,GLXDrawable,GLXContext) da_glXMakeCurrent;
        alias nothrow Bool function(Display*,int*,int*) da_glXQueryExtension;
        alias nothrow Bool function(Display*,int*,int*) da_glXQueryVersion;
        alias nothrow void function(Display*,GLXDrawable) da_glXSwapBuffers;
        alias nothrow void function(Font,int,int,int) da_glXUseXFont;
        alias nothrow void function() da_glXWaitGL;
        alias nothrow void function() da_glXWaitX;
        alias nothrow char* function(Display*,int) da_glXGetClientString;
        alias nothrow char* function(Display*,int,int) da_glXQueryServerString;
        alias nothrow char* function(Display*,int) da_glXQueryExtensionsString;

        /* GLX 1.3 */

        alias nothrow GLXFBConfig* function(Display*,int,int*) da_glXGetFBConfigs;
        alias nothrow GLXFBConfig* function(Display*,int,int*,int*) da_glXChooseFBConfig;
        alias nothrow int  function(Display*,GLXFBConfig,int,int*) da_glXGetFBConfigAttrib;
        alias nothrow XVisualInfo* function(Display*,GLXFBConfig) da_glXGetVisualFromFBConfig;
        alias nothrow GLXWindow function(Display*,GLXFBConfig,Window,int*) da_glXCreateWindow;
        alias nothrow void function(Display*,GLXWindow) da_glXDestroyWindow;
        alias nothrow GLXPixmap function(Display*,GLXFBConfig,Pixmap,int*) da_glXCreatePixmap;
        alias nothrow void function(Display*,GLXPixmap) da_glXDestroyPixmap;
        alias nothrow GLXPbuffer function(Display*,GLXFBConfig,int*) da_glXCreatePbuffer;
        alias nothrow void function(Display*,GLXPbuffer) da_glXDestroyPbuffer;
        alias nothrow void function(Display*,GLXDrawable,int,uint*) da_glXQueryDrawable;
        alias nothrow GLXContext function(Display*,GLXFBConfig,int,GLXContext,Bool) da_glXCreateNewContext;
        alias nothrow Bool function(Display*,GLXDrawable,GLXDrawable,GLXContext) da_glXMakeContextCurrent;
        alias nothrow GLXDrawable function() da_glXGetCurrentReadDrawable;
        alias nothrow Display* function() da_glXGetCurrentDisplay;
        alias nothrow int  function(Display*,GLXContext,int,int*) da_glXQueryContext;
        alias nothrow void function(Display*,GLXDrawable,uint) da_glXSelectEvent;
        alias nothrow void function(Display*,GLXDrawable,uint*) da_glXGetSelectedEvent;

        /* GLX 1.4+ */
        alias nothrow void* function(const(char)*) da_glXGetProcAddress;
    }

    __gshared
    {
        da_glXChooseVisual glXChooseVisual;
        da_glXCopyContext glXCopyContext;
        da_glXCreateContext glXCreateContext;
        da_glXCreateGLXPixmap glXCreateGLXPixmap;
        da_glXDestroyContext glXDestroyContext;
        da_glXDestroyGLXPixmap glXDestroyGLXPixmap;
        da_glXGetConfig glXGetConfig;
        da_glXGetCurrentContext glXGetCurrentContext;
        da_glXGetCurrentDrawable glXGetCurrentDrawable;
        da_glXIsDirect glXIsDirect;
        da_glXMakeCurrent glXMakeCurrent;
        da_glXQueryExtension glXQueryExtension;
        da_glXQueryVersion glXQueryVersion;
        da_glXSwapBuffers glXSwapBuffers;
        da_glXUseXFont glXUseXFont;
        da_glXWaitGL glXWaitGL;
        da_glXWaitX glXWaitX;
        da_glXGetClientString glXGetClientString;
        da_glXQueryServerString glXQueryServerString;
        da_glXQueryExtensionsString glXQueryExtensionsString;

        /* GLX 1.3 */

        da_glXGetFBConfigs glXGetFBConfigs;
        da_glXChooseFBConfig glXChooseFBConfig;
        da_glXGetFBConfigAttrib glXGetFBConfigAttrib;
        da_glXGetVisualFromFBConfig glXGetVisualFromFBConfig;
        da_glXCreateWindow glXCreateWindow;
        da_glXDestroyWindow glXDestroyWindow;
        da_glXCreatePixmap glXCreatePixmap;
        da_glXDestroyPixmap glXDestroyPixmap;
        da_glXCreatePbuffer glXCreatePbuffer;
        da_glXDestroyPbuffer glXDestroyPbuffer;
        da_glXQueryDrawable glXQueryDrawable;
        da_glXCreateNewContext glXCreateNewContext;
        da_glXMakeContextCurrent glXMakeContextCurrent;
        da_glXGetCurrentReadDrawable glXGetCurrentReadDrawable;
        da_glXGetCurrentDisplay glXGetCurrentDisplay;
        da_glXQueryContext glXQueryContext;
        da_glXSelectEvent glXSelectEvent;
        da_glXGetSelectedEvent glXGetSelectedEvent;

        /* GLX 1.4+ */
        da_glXGetProcAddress glXGetProcAddress;
    }

    package
    {
        void loadPlatformGL(void delegate(void**, string, bool doThrow = true) bindFunc)
        {
            bindFunc(cast(void**)&glXChooseVisual, "glXChooseVisual");
            bindFunc(cast(void**)&glXCopyContext, "glXCopyContext");
            bindFunc(cast(void**)&glXCreateContext, "glXCreateContext");
            bindFunc(cast(void**)&glXCreateGLXPixmap, "glXCreateGLXPixmap");
            bindFunc(cast(void**)&glXDestroyContext, "glXDestroyContext");
            bindFunc(cast(void**)&glXDestroyGLXPixmap, "glXDestroyGLXPixmap");
            bindFunc(cast(void**)&glXGetConfig, "glXGetConfig");
            bindFunc(cast(void**)&glXGetCurrentContext, "glXGetCurrentContext");
            bindFunc(cast(void**)&glXGetCurrentDrawable, "glXGetCurrentDrawable");
            bindFunc(cast(void**)&glXIsDirect, "glXIsDirect");
            bindFunc(cast(void**)&glXMakeCurrent, "glXMakeCurrent");
            bindFunc(cast(void**)&glXQueryExtension, "glXQueryExtension");
            bindFunc(cast(void**)&glXQueryVersion, "glXQueryVersion");
            bindFunc(cast(void**)&glXSwapBuffers, "glXSwapBuffers");
            bindFunc(cast(void**)&glXUseXFont, "glXUseXFont");
            bindFunc(cast(void**)&glXWaitGL, "glXWaitGL");
            bindFunc(cast(void**)&glXWaitX, "glXWaitX");
            bindFunc(cast(void**)&glXGetClientString, "glXGetClientString");
            bindFunc(cast(void**)&glXQueryServerString, "glXQueryServerString");
            bindFunc(cast(void**)&glXQueryExtensionsString, "glXQueryExtensionsString");

            bindFunc(cast(void**)&glXGetFBConfigs, "glXGetFBConfigs");
            bindFunc(cast(void**)&glXChooseFBConfig, "glXChooseFBConfig");
            bindFunc(cast(void**)&glXGetFBConfigAttrib, "glXGetFBConfigAttrib");
            bindFunc(cast(void**)&glXGetVisualFromFBConfig, "glXGetVisualFromFBConfig");
            bindFunc(cast(void**)&glXCreateWindow, "glXCreateWindow");
            bindFunc(cast(void**)&glXDestroyWindow, "glXDestroyWindow");
            bindFunc(cast(void**)&glXCreatePixmap, "glXCreatePixmap");
            bindFunc(cast(void**)&glXDestroyPixmap, "glXDestroyPixmap");
            bindFunc(cast(void**)&glXCreatePbuffer, "glXCreatePbuffer");
            bindFunc(cast(void**)&glXDestroyPbuffer, "glXDestroyPbuffer");
            bindFunc(cast(void**)&glXQueryDrawable, "glXQueryDrawable");
            bindFunc(cast(void**)&glXCreateNewContext, "glXCreateNewContext");
            bindFunc(cast(void**)&glXMakeContextCurrent, "glXMakeContextCurrent");
            bindFunc(cast(void**)&glXGetCurrentReadDrawable, "glXGetCurrentReadDrawable");
            bindFunc(cast(void**)&glXGetCurrentDisplay, "glXGetCurrentDisplay");
            bindFunc(cast(void**)&glXQueryContext, "glXQueryContext");
            bindFunc(cast(void**)&glXSelectEvent, "glXSelectEvent");
            bindFunc(cast(void**)&glXGetSelectedEvent, "glXGetSelectedEvent");

            bindFunc(cast(void**)&glXGetProcAddress, "glXGetProcAddressARB");
        }

        void* loadGLFunc(string symName)
        {
            return glXGetProcAddress(symName.toStringz());
        }

        bool hasValidContext()
        {
            if(glXGetCurrentContext && glXGetCurrentContext())
                return true;
            return false;
        }
    }
}
